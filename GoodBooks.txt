{u'hotReview': u'<span class="" property="v:description">啊，也不知道多少天了，终于啃完了大部头Code Complete。经典就是经典，确实受益匪浅。<br> <br>总结一下，其实让我记忆深刻的主要是两点：<br> <br>首先，软件构建的核心就是管理复杂度。虽然书中有不少的篇幅来讨论变量、语句等等这些编程的基本要素，还包括代码改善和调整的策略和方法，可谓不无巨细。不过深入理解一下，这些内容都是围绕着上面这句话展开的，也就是软件构建的核心就是管理复杂度。而这一目标产生的根源就在于人脑智力同软件项目复杂程度之间的矛盾。书中常常会提到几个数字，差不多在6、7左右变化，因为这是人脑智力管理的极限，多了，就管不过来了，呵呵。所以，书中会有一些结论性的建议。比如构建可工作的类，内部成员应该控制在7(+-)2，也就是5个或者9个左右，如果都是Native Type的话，9个成员变量能管的过来，如果都是对象成员的话，5个也能保证你的头脑始终清晰。还有，比如程序中的嵌套结构，类似于If，循环啊什么的，要保持嵌套层次不能多于6层，而据实际调查，一般3层以上的嵌套就会使程序员非常的困惑和抓狂了；还有比如子程序的参数个数尽量保持在7个以下，要不然也记不住，别说7个了，没有现代IDE的帮助，我连4个以上的参数我都记不住，呵呵。<br> <br>我想满足这些指标并不是很难的事情，而这些东西也给出了对于代码进行改善时候可以依据的标准。不过想要管理这种复杂度，从作者的书中总结一下，具体可能是以下几点：第一，分割，既然大脑管不过来，那就把系统进行分割，也就是从设计角度上抽象出若干部分，每次让大脑focus在一个部分上，这点我是有深刻体会，虽然我现在完全自己做的东西超不过15000行，不过也不能妄想自己把所有的部分都记住，如果抽象的不好的话，我就特别头疼，每天在代码中翻来翻去的，效率非常低；第二，清晰理解，其实这点跟上面一点是差不多的，只有清晰理解了抽象的含义，才能做好每个封装每个接口，这样在关注别的抽象部分的时候，其他部分需要记住和管理的更清晰也更简洁，因为不需要关注其他部分是如何实现的，只要按照接口和抽象来做就好了；第三，清晰表达，在程序中应该清晰表达逻辑和抽象含义，也就是增加程序的可读性，唉，这点太重要了，书上也围绕着这个不断的论述，上面提到那些事无巨细的部分反复的说着这一点，甚至连命名都有专门的一章来讨论。<br> <br>第二点我觉得记忆深刻的就是：以程序员为本。可惜国内的我见过的企业做不到这些。其实以程序员为本不是说一个公司的文化，也不是说单纯就是项目管理人员的事情，其实，最底层的程序员也应当遵从这一条。代码首先是为了人而写的，不是为了机器。机器只会对机器码感兴趣，高级语言自然是留给人来看的。所以说，即便是最底层的程序员也应当奉行这一条，合作中更讲究这个。呵呵，话题又回到了上面提过的可读性的问题。当然，以程序员为本也可以延伸到企业文化或者项目组文化，毕竟在这个过程中，程序员追求的技术满足程度外行可能无法理解，不过理解起来也很容易，就像画家对于自己的油画，建筑师对于自己的建筑那种感觉。<br> <br>“Programming is neither fully an art nor fully a science. As it's typically practiced, it's a "craft" that's somewhere between art and science. At its best, it's an engineering discipline that arises from the synergistic fusion of art and science.”现在我的理解，恰恰是这种艺术与科学相互融合的产物带给程序员无比的满足感。<div class="clear"></div></span>', u'publisher': u' 电子工业出版社', u'ISBN': u'9787121022982', u'author': u'[美] 史蒂夫·迈克康奈尔', u'url': u'https://book.douban.com/subject/1477390/', u'bookName': u'代码大全（第2版）', u'recommendUrls': [u'https://book.douban.com/subject/1052241/', u'https://book.douban.com/subject/1052241/', u'https://book.douban.com/subject/1152111/', u'https://book.douban.com/subject/1152111/', u'https://book.douban.com/subject/1229923/', u'https://book.douban.com/subject/1229923/', u'https://book.douban.com/subject/1467587/', u'https://book.douban.com/subject/1467587/', u'https://book.douban.com/subject/1230413/', u'https://book.douban.com/subject/1230413/', u'https://book.douban.com/subject/1885170/', u'https://book.douban.com/subject/1885170/', u'https://book.douban.com/subject/1102259/', u'https://book.douban.com/subject/1102259/', u'https://book.douban.com/subject/1140457/', u'https://book.douban.com/subject/1140457/', u'https://book.douban.com/subject/1148282/', u'https://book.douban.com/subject/1148282/', u'https://book.douban.com/subject/1230206/', u'https://book.douban.com/subject/1230206/'], u'score': u' 9.3 ', u'time': u' 2006-3', u'_id': ObjectId('572221875dc210751cfce816'), u'intro': u'第2版的《代码大全》是著名IT畅销书作者史蒂夫·迈克康奈尔11年前的经典著作的全新演绎：第2版不是第一版的简单修订增补，而是完全进行了重写；增加了很多与时俱进的内容。这也是一本完整的软件构建手册，涵盖了软件构建过程中的所有细节。它从软件质量和编程思想等方面论述了软件构建的各个问题，并详细论述了紧跟潮流的新技术、高屋建瓴的观点、通用的概念，还含有丰富而典型的程序示例。这本书中所论述的技术不仅填补了初级与高级编程技术之间的空白，而且也为程序员们提供了一个有关编程技巧的信息来源。这本书对经验丰富的程序员、技术带头人、自学的程序员及几乎不懂太多编程技巧的学生们都是大有裨益的。可以说，无论是什么背景的读者，阅读这本书都有助于在更短的时间内、更容易地写出更好的程序。', u'price': u' 128.00元'}{u'hotReview': u'<span class="" property="v:description">作者坦言，书中描述的23种模式并不是他们创造出来的，他们只是进行了总结和归纳。<br><br>这本书并不适于初学编程的人，甚至是没有相关知识背景的熟练程序员。因为其对概念的描述太过简洁和学术化，其C++的例子也不是很好懂--我自己就愣是没有看懂，后来还是通过另一本以Java为例子的书来帮助理解的。<br><br>我以为学设计模式，切不可太生搬硬套--这是初学者常犯的毛病。而应该更深入的理解其内涵，更多的研读现实中成功产品的源代码，以理解这些模式是如何实际应用的。<br><br>设计模式并不是什么新的东西。有些模式，你或许已经在实际项目中应用了很多年了，只是不知道人家原来是这么称呼它的！<br><br>所以，这本书最大的贡献应该是统一了术语，从此全世界的圈内人士交流再无障碍，GOF一词也因此成为了经典。<br><br><div class="clear"></div></span>', u'publisher': u' 机械工业出版社', u'ISBN': u'9787111075752', u'author': u'[美] Erich Gamma', u'url': u'https://book.douban.com/subject/1052241/', u'bookName': u'设计模式', u'recommendUrls': [u'https://book.douban.com/subject/1229923/', u'https://book.douban.com/subject/1229923/', u'https://book.douban.com/subject/1477390/', u'https://book.douban.com/subject/1477390/', u'https://book.douban.com/subject/1140457/', u'https://book.douban.com/subject/1140457/', u'https://book.douban.com/subject/1231590/', u'https://book.douban.com/subject/1231590/', u'https://book.douban.com/subject/1091086/', u'https://book.douban.com/subject/1091086/', u'https://book.douban.com/subject/1102259/', u'https://book.douban.com/subject/1102259/', u'https://book.douban.com/subject/1152111/', u'https://book.douban.com/subject/1152111/', u'https://book.douban.com/subject/1241385/', u'https://book.douban.com/subject/1241385/', u'https://book.douban.com/subject/1119904/', u'https://book.douban.com/subject/1119904/', u'https://book.douban.com/subject/1230413/', u'https://book.douban.com/subject/1230413/'], u'score': u' 9.1 ', u'time': u' 2000-9', u'_id': ObjectId('572221885dc210751cfce81b'), u'intro': u'这本书结合设计实作例从面向对象的设计中精选出23个设计模式，总结了面向对象设计中最有价值的经验，并且用简洁可复用的形式表达出来。书中分类描述了一组设计良好、表达清楚的软件设计模式，这些模式在实用环境下特别有用。此书适合大学计算机专业的学生、研究生及相关人员参考。', u'price': u' 35.00元'}